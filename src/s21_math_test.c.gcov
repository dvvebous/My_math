        -:    0:Source:s21_math_test.c
        -:    0:Graph:s21_math_test.gcno
        -:    0:Data:s21_math_test.gcda
        -:    0:Runs:11
        -:    1:#include <stdio.h>
        -:    2:#include <math.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <check.h>
        -:    5:#include "s21_math.h"
        -:    6:
        1:    7:START_TEST(s21_abs_test) {
       1*:    8:    ck_assert_int_eq(s21_abs(2), abs(2));
       1*:    9:    ck_assert_int_eq(s21_abs(-1), abs(-1));
       1*:   10:    ck_assert_int_eq(s21_abs(0), abs(0));
       1*:   11:    ck_assert_int_eq(s21_abs((int)INFINITY),abs((int)INFINITY));
       1*:   12:    ck_assert_int_eq(s21_abs((int)-INFINITY),abs((int)-INFINITY));
       1*:   13:    ck_assert_int_eq(s21_abs((int)NAN),abs((int)NAN));
        1:   14:}
        -:   15:END_TEST
        -:   16:
        -:   17:
        -:   18:
        -:   19:// START_TEST(s21_acos_test) {
        -:   20:
        -:   21:// }
        -:   22:// END_TEST
        -:   23:
        -:   24:// START_TEST(s21_asin_test) {
        -:   25:
        -:   26:// }
        -:   27:// END_TEST
        -:   28:
        -:   29:// START_TEST(s21_atan_test) {
        -:   30:
        -:   31:// }
        -:   32:// END_TEST
        -:   33:
    #####:   34:START_TEST(s21_ceil_test) {
    #####:   35:    ck_assert_ldouble_eq(s21_ceil(-13.7), ceil(-13.7));
    #####:   36:    ck_assert_ldouble_eq(s21_ceil(0.5), ceil(0.5));
    #####:   37:    ck_assert_ldouble_eq(s21_ceil(2.56687), ceil(2.56687));
    #####:   38:    ck_assert_ldouble_eq(s21_ceil(-134.98879), ceil(-134.98879));
    #####:   39:    ck_assert_ldouble_eq(s21_ceil(1.0), ceil(1.0));
    #####:   40:    ck_assert_ldouble_eq(s21_ceil(-5.0), ceil(-5.0));
    #####:   41:}
        -:   42:END_TEST
        -:   43:
        1:   44:START_TEST(s21_cos_test) {
       1*:   45:    ck_assert_float_eq(s21_cos(-1.56), cos(-1.56));
       1*:   46:    ck_assert_float_eq(s21_cos(0.0), cos(0.0));
       1*:   47:    ck_assert_float_eq(s21_cos(3.14), cos(3.14));
       1*:   48:    ck_assert_float_eq(s21_cos(0.657), cos(0.657));
       1*:   49:    ck_assert_float_eq(s21_cos(-1.67), cos(-1.67));
       1*:   50:    ck_assert_float_eq(s21_cos(22.3), cos(22.3));
        1:   51:}
        -:   52:END_TEST
        -:   53:
        1:   54:START_TEST(s21_exp_test) {
       1*:   55:    ck_assert_float_eq(s21_exp(-1.56), exp(-1.56));
       1*:   56:    ck_assert_float_eq(s21_exp(0.0), exp(0.0));
       1*:   57:    ck_assert_float_eq(s21_exp(3.14), exp(3.14));
       1*:   58:    ck_assert_float_eq(s21_exp(0.657), exp(0.657));
       1*:   59:    ck_assert_float_eq(s21_exp(-1.67), exp(-1.67));
       1*:   60:    ck_assert_float_eq(s21_exp(22.3), exp(22.3));
        1:   61:}
        -:   62:END_TEST
        -:   63:
        -:   64:
        1:   65:START_TEST(s21_fabs_test) {
       1*:   66:    ck_assert_int_eq(s21_fabs(-1.5),fabs(-1.5));
       1*:   67:    ck_assert_int_eq(s21_fabs(0.0),fabs(0.0));
       1*:   68:    ck_assert_int_eq(s21_fabs(0.5), fabs(0.5));
       1*:   69:    ck_assert_int_eq(s21_fabs(1.17394757593),fabs(1.17394757593));
       1*:   70:    ck_assert_int_eq(s21_fabs(36.5), fabs(36.5));
        -:   71:    
        1:   72:}
        -:   73:END_TEST
        -:   74:
        1:   75:START_TEST(s21_floor_test) {
       1*:   76:    ck_assert_ldouble_eq(s21_floor(-13.7), floor(-13.7));
       1*:   77:    ck_assert_ldouble_eq(s21_floor(0.5), floor(0.5));
       1*:   78:    ck_assert_ldouble_eq(s21_floor(2.56687), floor(2.56687));
       1*:   79:    ck_assert_ldouble_eq(s21_floor(-134.98879), floor(-134.98879));
       1*:   80:    ck_assert_ldouble_eq(s21_floor(1.0), floor(1.0));
       1*:   81:    ck_assert_ldouble_eq(s21_floor(-5.0), floor(-5.0));
        1:   82:}
        -:   83:END_TEST
        -:   84:
        1:   85:START_TEST(s21_fmod_test) {
       1*:   86:    ck_assert_ldouble_eq(s21_fmod(-3.15, 2.5), fmod(-3.15, 2.5));
       1*:   87:    ck_assert_ldouble_eq(s21_fmod(11.213, 1.5), fmod(11.213, 1.5));
       1*:   88:    ck_assert_int_eq(s21_fmod(-1000.21313, 3.23), fmod(-1000.21313, 3.23));
       1*:   89:    ck_assert_ldouble_eq(s21_fmod(34434.89898, 2.5), fmod(34434.89898, 2.5));
       1*:   90:    ck_assert_ldouble_eq(s21_fmod(0, 2.5), fmod(0, 2.5));
       1*:   91:    ck_assert_ldouble_eq(s21_fmod(2.5, 1.8), fmod(2.5, 1.8));
        1:   92:}
        -:   93:END_TEST
        -:   94:
        -:   95:
        1:   96:START_TEST(s21_log_test) {
       1*:   97:    ck_assert_int_eq(s21_log(-3.15), log(-3.15));
       1*:   98:    ck_assert_float_eq(s21_log(11.213), log(11.213));
       1*:   99:    ck_assert_int_eq(s21_log(-1000.21313), log(-1000.21313));
       1*:  100:    ck_assert_float_eq(s21_log(34434.89898), log(34434.89898));
       1*:  101:    ck_assert_ldouble_eq(s21_log(0.0), log(0.0));
       1*:  102:    ck_assert_float_eq(s21_log(2.5), log(2.5));
        1:  103:}
        -:  104:END_TEST
        -:  105:
        1:  106:START_TEST(s21_pow_test) {
       1*:  107:    ck_assert_float_eq(s21_fmod(-3.15, 2.5), fmod(-3.15, 2.5));
       1*:  108:    ck_assert_float_eq(s21_fmod(11.213, 1.5), fmod(11.213, 1.5));
       1*:  109:    ck_assert_int_eq(s21_fmod(-1000.21313, 3.23), fmod(-1000.21313, 3.23));
       1*:  110:    ck_assert_float_eq(s21_fmod(34434.89898, 2.5), fmod(34434.89898, 2.5));
       1*:  111:    ck_assert_float_eq(s21_fmod(0, 2.5), fmod(0, 2.5));
       1*:  112:    ck_assert_float_eq(s21_fmod(2.5, 1.8), fmod(2.5, 1.8));
        1:  113:}
        -:  114:END_TEST
        -:  115:
        1:  116:START_TEST(s21_sin_test) {
       1*:  117:    ck_assert_float_eq(s21_sin(-1.56), sin(-1.56));
       1*:  118:    ck_assert_float_eq(s21_sin(0.0), sin(0.0));
       1*:  119:    ck_assert_float_eq(s21_sin(3.14), sin(3.14));
       1*:  120:    ck_assert_float_eq(s21_sin(0.657), sin(0.657));
       1*:  121:    ck_assert_float_eq(s21_sin(-1.67), sin(-1.67));
       1*:  122:    ck_assert_float_eq(s21_sin(13.3), sin(13.3));
        1:  123:}
        -:  124:END_TEST
        -:  125:
        1:  126:START_TEST(s21_sqrt_test) {
       1*:  127:    ck_assert_float_eq(sqrt(0.0), s21_sqrt(0.0));
       1*:  128:    ck_assert_float_eq(sqrt(1.0), s21_sqrt(1.0));
       1*:  129:    ck_assert_float_eq(sqrt(3.14), s21_sqrt(3.14));
       1*:  130:    ck_assert_float_eq(sqrt(6.28), s21_sqrt(6.28));
       1*:  131:    ck_assert_float_eq(sqrt(2.2343), s21_sqrt(2.2343));
       1*:  132:    ck_assert_int_eq(sqrt(-123), s21_sqrt(-123));
        1:  133:}
        -:  134:END_TEST
        -:  135:
        -:  136:// START_TEST(s21_tan_test) {
        -:  137:
        -:  138:// }
        -:  139:// END_TEST
        -:  140:
        -:  141:
       11:  142:Suite *lib_suite(void) {
        -:  143:    Suite *s;
       11:  144:    s = suite_create("Checking functions");
        -:  145:
        -:  146:    TCase *tc_abs;
        -:  147:    TCase *tc_fabs;
        -:  148:    TCase *tc_fmod;
        -:  149:    TCase *tc_log;
        -:  150:    TCase *tc_pow;
        -:  151:    TCase *tc_ceil;
        -:  152:    TCase *tc_cos;
        -:  153:    TCase *tc_exp;
        -:  154:    TCase *tc_sin;
        -:  155:    TCase *tc_floor;  
        -:  156:    TCase *tc_sqrt;
        -:  157:
       11:  158:    tc_abs = tcase_create("S21_ABS");
        -:  159:    // tc_acos = tcase_create("S21_ACOS");
        -:  160:    // tc_asin = tcase_create("S21_ASIN");
        -:  161:    // tc_atan = tcase_create("S21_ATAN");
       11:  162:    tc_ceil = tcase_create("S21_CEIL");
       11:  163:    tc_cos = tcase_create("S21_COS");
       11:  164:    tc_exp = tcase_create("S21_EXP");
       11:  165:    tc_fabs = tcase_create("S21_FABS");
       11:  166:    tc_floor = tcase_create("S21_FLOOR");
       11:  167:    tc_fmod = tcase_create("S21_FMOD");
       11:  168:    tc_log = tcase_create("S21_LOG");
       11:  169:    tc_pow = tcase_create("S21_POW");
       11:  170:    tc_sin = tcase_create("S21_SIN");
       11:  171:    tc_sqrt = tcase_create("S21_SQRT");
        -:  172:    // tc_tan = tcase_create("S21_TAN");
        -:  173:
       11:  174:    suite_add_tcase(s, tc_abs);
       11:  175:    tcase_add_test(tc_abs, s21_abs_test);
        -:  176:
        -:  177:    // suite_add_tcase(s, tc_acos);
        -:  178:    // tcase_add_test(tc_acos, s21_acos_test);
        -:  179:
        -:  180:    // suite_add_tcase(s, tc_asin);
        -:  181:    // tcase_add_test(tc_asin, s21_asin_test);
        -:  182:
        -:  183:    // suite_add_tcase(s, tc_atan);
        -:  184:    // tcase_add_test(tc_asin, s21_asin_test);
        -:  185:
       11:  186:    suite_add_tcase(s, tc_ceil);
       11:  187:    tcase_add_test(tc_ceil, s21_ceil_test);
        -:  188:
       11:  189:    suite_add_tcase(s, tc_cos);
       11:  190:    tcase_add_test(tc_cos, s21_cos_test);
        -:  191:
       11:  192:    suite_add_tcase(s, tc_exp);
       11:  193:    tcase_add_test(tc_exp, s21_exp_test);
        -:  194:
       11:  195:    suite_add_tcase(s, tc_fabs);
       11:  196:    tcase_add_test(tc_fabs, s21_fabs_test);
        -:  197:
       11:  198:    suite_add_tcase(s, tc_floor);
       11:  199:    tcase_add_test(tc_floor, s21_floor_test);
        -:  200:
       11:  201:    suite_add_tcase(s, tc_fmod);
       11:  202:    tcase_add_test(tc_fmod, s21_fmod_test);
        -:  203:
       11:  204:    suite_add_tcase(s, tc_log);
       11:  205:    tcase_add_test(tc_log, s21_log_test);
        -:  206:
       11:  207:    suite_add_tcase(s, tc_pow);
       11:  208:    tcase_add_test(tc_pow, s21_pow_test);
        -:  209:
       11:  210:    suite_add_tcase(s, tc_sin);
       11:  211:    tcase_add_test(tc_sin, s21_sin_test);
        -:  212:
       11:  213:    suite_add_tcase(s, tc_sqrt);
       11:  214:    tcase_add_test(tc_sqrt, s21_sqrt_test);
        -:  215:
        -:  216:    // suite_add_tcase(s, tc_tan);
        -:  217:    // tcase_add_test(tc_tan, s21_tan_test);
        -:  218:
       11:  219:    return s;
        -:  220:}
        -:  221:
       11:  222:int main(void) {
        -:  223:    Suite *s;
        -:  224:    SRunner *sr;
        -:  225:
       11:  226:    s = lib_suite();
       11:  227:    sr = srunner_create(s);
       11:  228:    srunner_run_all(sr, CK_VERBOSE);
        1:  229:    srunner_free(sr);
        1:  230:    return 0;
        -:  231:}
